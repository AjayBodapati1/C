package com.example.desis_to_csv;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.HeadObjectRequest;
import software.amazon.awssdk.services.s3.model.HeadObjectResponse;

import java.net.URL;
import java.net.URLDecoder;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

@Service
public class S3MetadataService {

    private final S3Client s3Client;

    @Value("${aws.endpoint}")
    private String endpoint;

    public S3MetadataService(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public Map<String, String> getFileMetadata() {
        Map<String, String> metadata = new HashMap<>();

        try {
            // Parse bucket and key from URL
            URL url = new URL(endpoint);
            String path = URLDecoder.decode(url.getPath(), "UTF-8"); // e.g., /FR DEVS3_recon/Initial Margin EOD 2025.csv
            if (path.startsWith("/")) path = path.substring(1);

            String[] parts = path.split("/", 2);
            if (parts.length < 2) throw new IllegalArgumentException("Invalid S3 path structure.");

            String bucketName = parts[0];
            String objectKey = parts[1];

            HeadObjectRequest headRequest = HeadObjectRequest.builder()
                    .bucket(bucketName)
                    .key(objectKey)
                    .build();

            HeadObjectResponse headResponse = s3Client.headObject(headRequest);

            String fileName = objectKey.substring(objectKey.lastIndexOf("/") + 1);
            String fileType = headResponse.contentType();
            long fileSizeBytes = headResponse.contentLength();

            String timestamp = headResponse.lastModified()
                    .atZone(java.time.ZoneId.systemDefault())
                    .format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));

            metadata.put("fileName", fileName);
            metadata.put("fileType", fileType);
            metadata.put("sourceSystem", bucketName);
            metadata.put("timestamp", timestamp);
            metadata.put("fileSize", fileSizeBytes + " bytes");
            metadata.put("storagePath", endpoint);

        } catch (Exception e) {
            metadata.put("error", "Failed to fetch metadata: " + e.getMessage());
        }

        return metadata;
    }
}