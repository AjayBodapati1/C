package com.example.desis_to_csv.controller;

import com.example.desis_to_csv.service.MatchingService;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/match")
public class MatchingController {

    private final MatchingService matchingService;

    public MatchingController(MatchingService matchingService) {
        this.matchingService = matchingService;
    }

    @GetMapping
    public List<Map<String, String>> matchFiles(
            @RequestParam String file1Path,
            @RequestParam String file2Path
    ) throws IOException {
        return matchingService.processAndMatchFiles(file1Path, file2Path);
    }
}



package com.example.desis_to_csv.service;

import org.springframework.stereotype.Service;

import java.io.*;
import java.util.*;

@Service
public class MatchingService {

    public List<Map<String, String>> processAndMatchFiles(String file1Path, String file2Path) throws IOException {
        List<String> file1Values = new ArrayList<>();
        List<String> file2Values = new ArrayList<>();

        // Read file 1 and clean DESIS field 105
        try (BufferedReader reader = new BufferedReader(new FileReader(file1Path))) {
            String headerLine = reader.readLine();
            if (headerLine == null) throw new IOException("File 1 is empty");
            String[] headers = headerLine.split(",");
            int field105Index = findFieldIndex(headers, "105");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",", -1);
                if (field105Index >= 0 && field105Index < fields.length) {
                    String value = fields[field105Index];
                    value = value.replaceFirst("(?i)^PE@|^LND@", ""); // Remove PE@ or LND@ (case-insensitive)
                    file1Values.add(value.trim());
                }
            }
        }

        // Read file 2 and get DESIS field 1005
        try (BufferedReader reader = new BufferedReader(new FileReader(file2Path))) {
            String headerLine = reader.readLine();
            if (headerLine == null) throw new IOException("File 2 is empty");
            String[] headers = headerLine.split(",");
            int field1005Index = findFieldIndex(headers, "1005");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",", -1);
                if (field1005Index >= 0 && field1005Index < fields.length) {
                    file2Values.add(fields[field1005Index].trim());
                }
            }
        }

        // Match and create result
        List<Map<String, String>> result = new ArrayList<>();
        int max = Math.max(file1Values.size(), file2Values.size());
        for (int i = 0; i < max; i++) {
            String val1 = i < file1Values.size() ? file1Values.get(i) : "";
            String val2 = i < file2Values.size() ? file2Values.get(i) : "";

            Map<String, String> matchResult = new HashMap<>();
            matchResult.put("file1Value", val1);
            matchResult.put("file2Value", val2);
            matchResult.put("matchStatus", val1.equals(val2) ? "Matched" : "Not Matched");
            result.add(matchResult);
        }

        return result;
    }

    private int findFieldIndex(String[] headers, String targetField) {
        for (int i = 0; i < headers.length; i++) {
            if (headers[i].trim().equals(targetField)) {
                return i;
            }
        }
        return -1;
    }
}