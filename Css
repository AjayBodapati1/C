package com.example.desis_to_csv;

import org.springframework.stereotype.Service;

import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

@Service
public class S3FileMetadataService {

    public Map<String, String> fetchMetadataFromS3() {
        Map<String, String> metadata = new HashMap<>();

        try {
            String s3Url = "https://ecs-s3-fr.dev.echonet/FR%20DEVS3_recon/Initial%20Margin%20EOD%202025.csv?response-content-disposition-attachment&AWSAccessKeyId=userdev%20s3%20recon%20nexgen_rw&Signature=zI28u7220MMQNI1XvJ%20Oc4%3D&Expires=1747712";

            URL url = new URL(s3Url);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("HEAD");

            String contentType = connection.getContentType();
            String path = url.getPath();
            String fileName = path.substring(path.lastIndexOf('/') + 1);

            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));

            metadata.put("fileName", fileName);
            metadata.put("fileType", contentType != null ? contentType : "unknown");
            metadata.put("sourceSystem", "S3-Recon"); // customize if needed
            metadata.put("uploadedBy", "SystemUser"); // hardcoded or configurable
            metadata.put("timestamp", timestamp);
            metadata.put("storagePath", s3Url);

            connection.disconnect();
        } catch (Exception e) {
            metadata.put("error", "Failed to read metadata: " + e.getMessage());
        }

        return metadata;
    }
}







==========


package com.example.desis_to_csv;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

@RestController
public class S3FileMetadataController {

    @Autowired
    private S3FileMetadataService service;

    @GetMapping("/s3-fixed-file-metadata")
    public Map<String, String> getMetadataFromHardcodedUrl() {
        return service.fetchMetadataFromS3();
    }
}