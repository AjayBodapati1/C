public Map<String, String> extractS3FileMetadata() {
    Map<String, String> metadata = new HashMap<>();

    try {
        String fileUrl = "https://your-bucket.s3.amazonaws.com/sample.json"; // hardcoded
        URL url = new URL(fileUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        // Extract headers
        int fileSizeBytes = conn.getContentLength();
        String contentType = conn.getContentType();

        // Get filename
        String path = url.getPath();
        String fileName = path.substring(path.lastIndexOf('/') + 1);
        String entityCode = fileName.length() >= 6 ? fileName.substring(0, 6) : "UNKNOWN";

        // Fallback for content type
        if (contentType == null || contentType.isEmpty()) {
            contentType = getMimeTypeFromExtension(fileName);
        }

        // File size fallback
        if (fileSizeBytes <= 0) {
            // Try reading content size manually
            fileSizeBytes = conn.getInputStream().readAllBytes().length;
        }

        // Format file size and time
        double fileSizeKB = fileSizeBytes / 1024.0;
        String formattedSize = new DecimalFormat("#.##").format(fileSizeKB);
        String uploadTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));

        metadata.put("filename", fileName);
        metadata.put("uploadTime", uploadTime);
        metadata.put("entityCode", entityCode);
        metadata.put("fileType", contentType);
        metadata.put("fileSize", formattedSize + " KB");

        conn.disconnect();
    } catch (Exception e) {
        metadata.put("error", "Failed to fetch metadata: " + e.getMessage());
    }

    return metadata;
}